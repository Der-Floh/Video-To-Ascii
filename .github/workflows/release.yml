name: Build-and-publish VideoToAscii

on:
  push:
    tags: ['v*']

jobs:
  release:
    runs-on: windows-latest
    env:
      # Convenience variables
      VERSION: ${{ github.ref_name }}
      GITHUB_ENV: ${{ github.ref_name }}
      PUBLISH_DIR: ${{ github.workspace }}\bin\Publish\VideoToAscii

    steps:
    # 1. Checkout source
    - uses: actions/checkout@v4

    # 2. Install .NET 9 SDK
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    # 3. Compute CLEAN_VERSION
    - name: Compute numeric version
      id: vars
      shell: pwsh
      run: |
        $clean = "$env:VERSION".TrimStart('v')
        echo "CLEAN_VERSION=$clean" >> $env:GITHUB_ENV
        echo "clean=$clean"         >> $env:GITHUB_OUTPUT

    # 4. Build & publish
    - name: Build .NET app
      shell: pwsh
      run: |
        dotnet publish VideoToAscii/VideoToAscii.csproj -c Release -o "$env:PUBLISH_DIR" -r win-x64 --self-contained true -p:Version=$env:CLEAN_VERSION

    - name: Show publish contents
      shell: pwsh
      run: |
        Get-ChildItem -Path "C:\a\Video-To-Ascii\Video-To-Ascii\VideoToAscii\bin\Publish\VideoToAscii" -Recurse |
          Select-Object @{N='Size(KB)';E={"{0:N0}" -f ($_.Length/1KB)}}, FullName |
          Format-Table -AutoSize

    # 5. Build the MSI
    - name: Build MSI with Advanced Installer
      uses: caphyon/advinst-github-action@main
      with:
        aip-path: ./Package/VideoToAscii.aip
        aip-commands: |
          Build

    # 6. Upload the MSI to GitHub Release
    - uses: softprops/action-gh-release@v2
      with:
        files: |
          **/VideoToAscii-*.msi

    # 7. Calculate SHA-256
    - name: Compute MSI hash
      id: hash
      shell: pwsh
      run: |
        $msi = Get-ChildItem -Filter "VideoToAscii-*.msi" -Recurse | Select-Object -First 1
        $sha = (Get-FileHash $msi.FullName -Algorithm SHA256).Hash
        echo "sha=$sha" >> $env:GITHUB_OUTPUT
        echo "msipath=$($msi.FullName)" >> $env:GITHUB_OUTPUT

    # 8. Render package-manager templates
    - name: Render packaging templates
      shell: pwsh
      run: |
        $replacements = @{
          '\{\{VERSION\}\}'  = "${{ env.GITHUB_ENV }}"
          '\{\{SHA256\}\}'   = "${{ steps.hash.outputs.sha }}"
        }
        Get-ChildItem Package -Recurse -Filter *.template | ForEach-Object {
          $content = Get-Content $_ -Raw
          foreach ($k in $replacements.Keys) { $content = $content -replace $k, $replacements[$k] }
          $dest = $_.FullName -replace '\.template$',''
          $content | Set-Content $dest
        }

    # 9. ───── WinGet  ────────────────────────────────────────────────
    - name: Install wingetcreate
      run: winget install --id=Microsoft.WingetCreate -e --accept-package-agreements --disable-interactivity
    - name: Submit WinGet manifest
      shell: pwsh
      run: |
        wingetcreate update `
          --manifest Package\winget\Der_Floh.VideoToAscii.yaml `
          --submit `
          --replace `
          --token ${{ secrets.WINGET_TOKEN }}

    # 10. ──── Chocolatey  ────────────────────────────────────────────
    - name: Pack & push Chocolatey package
      shell: pwsh
      run: |
        cd Package\chocolatey
        choco pack videotoascii.nuspec
        choco push videotoascii.${{ env.GITHUB_ENV }}.nupkg `
          --source "https://push.chocolatey.org/" `
          --api-key ${{ secrets.CHOCO_API_KEY }}

    # 11. ──── Scoop  ────────────────────────────────────────────────
    #- name: Update Scoop bucket
    #  shell: pwsh
    #  run: |
    #    git clone https://github.com/Der-Floh/videotoascii-bucket.git bucket
    #    Copy-Item Package\scoop\videotoascii.json bucket\bucket\videotoascii.json -Force
    #    cd bucket
    #    git config user.name  "github-actions"
    #    git config user.email "action@github.com"
    #    git add bucket/videotoascii.json
    #    git commit -m "VideoToAscii ${{ env.GITHUB_ENV }}"
    #    git push https://${{ secrets.SCOOP_PAT }}@github.com/Der-Floh/videotoascii-bucket.git HEAD:main
