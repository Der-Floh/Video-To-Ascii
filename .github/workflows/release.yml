name: Build-and-publish VideoToAscii

on:
  push:
    tags: ['v*']

permissions:
  contents: write

jobs:
  release:
    runs-on: windows-latest
    env:
      VERSION: ${{ github.ref_name }}
      PUBLISH_DIR: ${{ github.workspace }}\VideoToAscii\bin\Publish\VideoToAscii
      WINGET_TOKEN: ${{ secrets.WINGET_TOKEN }}

    steps:

    # 1. Checkout source ------------------------------------------------
    - name: Checkout Source
      uses: actions/checkout@v4

    # 2. .NET SDK -------------------------------------------------------
    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    # 3. Compute CLEAN_VERSION ------------------------------------------
    - name: Compute numeric version
      id: vars
      shell: pwsh
      run: |
        $clean = "${env:VERSION}".TrimStart('v')
        echo "CLEAN_VERSION=$clean" >> $Env:GITHUB_ENV
        echo "clean=$clean"         >> $Env:GITHUB_OUTPUT

    # 4. Build & publish .NET app ---------------------------------------
    - name: Build .NET app
      id: artifact
      shell: pwsh
      run: |
        dotnet publish VideoToAscii\VideoToAscii.csproj `
          -c Release `
          -o "$env:PUBLISH_DIR" `
          -p:Version=$env:CLEAN_VERSION `
          -p:InformationalVersion=$env:CLEAN_VERSION `
          -p:IncludeSourceRevisionInInformationalVersion=false

        $zip = "$env:PUBLISH_DIR\VideoToAscii-${{ steps.vars.outputs.clean }}.zip"
        Compress-Archive -Path "$env:PUBLISH_DIR\*" -DestinationPath $zip
        echo "path=$zip" >> $Env:GITHUB_OUTPUT
        Write-Host "Portable ZIP => $zip"
    
    # 5. Upload ZIP to the GitHub Release ------------------------------
    - name: Attach ZIP to release
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.artifact.outputs.path }}

    # 8. Compute SHA-256 of the same MSI --------------------------------
    - name: Compute MSI hash
      id: hash
      shell: pwsh
      run: |
        $sha = (Get-FileHash '${{ steps.artifact.outputs.path }}' -Algorithm SHA256).Hash
        echo "sha=$sha" >> $Env:GITHUB_OUTPUT
        Write-Host "ZIP SHA-256: $sha"

    # 10. Render package-manager templates ------------------------------
    - name: Render packaging templates
      shell: pwsh
      run: |
        $replacements = @{
          '\{\{VERSION\}\}' = '${{ steps.vars.outputs.clean }}'
          '\{\{SHA256\}\}'  = '${{ steps.hash.outputs.sha }}'
        }
        Get-ChildItem -Path Package -Recurse -File |
          Where-Object { $_.Extension -ne '.aip' } |
          ForEach-Object {
            $text = Get-Content $_ -Raw
            foreach ($k in $replacements.Keys) { $text = $text -replace $k, $replacements[$k] }
            $text | Set-Content $_
          }

    # 11. Pack Chocolatey package and expose nupkg_path -----------------
    - name: Pack Chocolatey package
      id: choco
      shell: pwsh
      run: |
        $tools = "$env:GITHUB_WORKSPACE\Package\chocolatey\videotoascii\tools"
        New-Item -ItemType Directory -Force -Path $tools | Out-Null
        Copy-Item '${{ steps.artifact.outputs.path }}' $tools -Force

        cd Package\chocolatey\videotoascii
        choco pack videotoascii.nuspec
        $pkg = Get-ChildItem *.nupkg | Select-Object -First 1
        echo "nupkg_path=$($pkg.FullName)" >> $Env:GITHUB_OUTPUT

    # 12. Upload .nupkg to the same release -----------------------------
    - name: Attach .nupkg to release
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.choco.outputs.nupkg_path }}

    # 13. ──── Chocolatey Release ───────────────────────────────────────
    #- name: Release Chocolatey package
    #  shell: pwsh
    #  run: |
    #    choco push '${{ steps.choco.outputs.nupkg_path }}' `
    #      --source "https://push.chocolatey.org/" `
    #      --api-key ${{ secrets.CHOCO_API_KEY }}

    # 14. ───── WinGet Release ──────────────────────────────────────────
    #- name: Install wingetcreate
    #  run: choco install wingetcreate -y --no-progress
    #- name: Release WinGet package
    #  shell: pwsh
    #  run: |
    #    wingetcreate update `
    #      --urls "https://github.com/Der-Floh/Video-To-Ascii/releases/download/v${{ steps.vars.outputs.clean }}/VideoToAscii-v${{ steps.vars.outputs.clean }}.zip" `
    #      --version "${{ steps.vars.outputs.clean }}" `
    #      --submit `
    #      --silent `
    #      --token "$env:WINGET_TOKEN"
    #      Der_Floh.VideoToAscii

    # 15. ──── Scoop Release ────────────────────────────────────────────
    #- name: Release Scoop package
    #  shell: pwsh
    #  run: |
    #    git clone https://github.com/Der-Floh/videotoascii-bucket.git bucket
    #    Copy-Item Package\scoop\videotoascii.json bucket\bucket\videotoascii.json -Force
    #    cd bucket
    #    git config user.name  "github-actions"
    #    git config user.email "action@github.com"
    #    git add bucket/videotoascii.json
    #    git commit -m "VideoToAscii ${{ steps.vars.outputs.clean }}"
    #    git push https://${{ secrets.SCOOP_PAT }}@github.com/Der-Floh/videotoascii-bucket.git HEAD:main
